{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"simple-ANN (with iris)","provenance":[],"collapsed_sections":[],"mount_file_id":"17xkdkPHKJ3MA3z1pmGsIuacnl5eV1v5F","authorship_tag":"ABX9TyNlH+RbXl2bk+X+IARJiEHZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"gb6rz7QkUMTw"},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"paWVlQtkVvKc"},"source":["class Model(nn.Module):\n","  def __init__(self, in_features=4, h1=8, h2=9, out_features=3): #numbers of hidden layers are chosen randomly\n","    #how many layers?\n","    super().__init__()\n","    self.fc1 = nn.Linear(in_features, h1)\n","    self.fc2 = nn.Linear(h1, h2)\n","    self.out = nn.Linear(h2, out_features)\n","    #input layer (4 features)>> h1 N >> h2 N >> output layer (3 classes)\n","    \n","  \n","  def forward(self,x):\n","    #forward propagations\n","    x = F.relu(self.fc1(x))  #activation function\n","    x = F.relu(self.fc2(x))\n","    x = self.out(x)\n","    return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sJH3jYO5cYnV"},"source":["torch.manual_seed(32)\n","model  = Model()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GVC_ma4Tnbnu"},"source":["df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dataset/iris.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":220},"id":"6Cu6u9cSmf9x","executionInfo":{"status":"ok","timestamp":1627104848242,"user_tz":-360,"elapsed":14,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"3972d6be-e145-46c5-8916-b696c09ed492"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length (cm)</th>\n","      <th>sepal width (cm)</th>\n","      <th>petal length (cm)</th>\n","      <th>petal width (cm)</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal length (cm)  sepal width (cm)  ...  petal width (cm)  target\n","0                5.1               3.5  ...               0.2     0.0\n","1                4.9               3.0  ...               0.2     0.0\n","2                4.7               3.2  ...               0.2     0.0\n","3                4.6               3.1  ...               0.2     0.0\n","4                5.0               3.6  ...               0.2     0.0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"b6VAyG7FmhDm"},"source":["X = df.drop('target', axis=1).values\n","y = df['target'].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vfDEXhvUmykX"},"source":["X_train, X_test, y_train, y_test = train_test_split(X,y, test_size  = 0.2, random_state = 33)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_KglvbFMmy71"},"source":["X_train = torch.FloatTensor(X_train)\n","X_test = torch.FloatTensor(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q31BIZ99nizk"},"source":["y_train = torch.LongTensor(y_train)\n","y_test = torch.LongTensor(y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P6tFUw6Wntc5"},"source":["criterion = nn.CrossEntropyLoss()\n","\n","optimiser = torch.optim.Adam(model.parameters(), lr=0.0001) #adam optimizer\n","#decrease the learning rate if the error rate dont decrease (it will take more time eventually)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nuRhFyuhvNT_"},"source":["epochs = 20000"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CyqbklZ85jFG"},"source":["losses = []\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3-z-iRtR5n_G"},"source":["for i in range(epochs):\n","  y_pred = model.forward(X_train)\n","  #calculate the loss\n","  loss= criterion(y_pred, y_train)\n","  losses.append(loss)\n","\n","  if i%10==0:\n","    print(f'Epoch {i} and loss is: {loss}')\n","   \n","  #Backprop\n","  optimiser.zero_grad()\n","  loss.backward()\n","  optimiser.step()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"1FQe6zf96-FM","executionInfo":{"status":"ok","timestamp":1627104868719,"user_tz":-360,"elapsed":770,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"e4ac3cdf-1c32-4077-e757-643834fe59b6"},"source":["import matplotlib.pyplot as plt\n","plt.plot(range(epochs),losses)\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","#The loss will converge"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Epoch')"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"fE5AC0737MSr"},"source":["with torch.no_grad(): #turn of backprop just evaluate \n","  y_eval = model.forward(X_test)\n","  loss = criterion(y_eval, y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MH7TVkvl9ogH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627105128860,"user_tz":-360,"elapsed":324,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"8bb0f037-f7a8-4e0a-b669-624a3955e555"},"source":["loss\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(0.0461)"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aEHg9WYUEGrp","executionInfo":{"status":"ok","timestamp":1627105986898,"user_tz":-360,"elapsed":325,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"ee589466-e28b-467d-fa36-d64939f0e0ef"},"source":[""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([], dtype=int64),)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wTAg27c-Be5d","executionInfo":{"status":"ok","timestamp":1627106276325,"user_tz":-360,"elapsed":314,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"53a3ceaa-d6e3-4e60-db0a-fa3cabe4f3d4"},"source":["correct = 0\n","with torch.no_grad():\n","  for i, data in enumerate(X_test):\n","    y_val = model.forward(data)\n","\n","    print(f'{i+1}.      {str(y_val.argmax().numpy())}       {y_test[i]} ')\n","    if y_val.argmax().item() == y_test[i]:\n","      correct +=1"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1.      1       1 \n","2.      1       1 \n","3.      0       0 \n","4.      1       1 \n","5.      2       2 \n","6.      2       2 \n","7.      0       0 \n","8.      0       0 \n","9.      2       2 \n","10.      2       2 \n","11.      2       2 \n","12.      0       0 \n","13.      2       2 \n","14.      1       1 \n","15.      2       2 \n","16.      1       1 \n","17.      2       2 \n","18.      0       0 \n","19.      1       1 \n","20.      2       2 \n","21.      0       0 \n","22.      0       0 \n","23.      2       2 \n","24.      0       0 \n","25.      2       2 \n","26.      2       2 \n","27.      1       1 \n","28.      1       1 \n","29.      2       2 \n","30.      2       2 \n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RQO-AnnyCRo_","executionInfo":{"status":"ok","timestamp":1627106281496,"user_tz":-360,"elapsed":342,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"a8f90a95-0e34-44aa-cdbf-480c1c91996f"},"source":["correct"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["30"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"id":"FbvUM5FsGGWF"},"source":["torch.save(model.state_dict(),'my_iris_model.pt')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sCZrKH9gGS5B","executionInfo":{"status":"ok","timestamp":1627106681128,"user_tz":-360,"elapsed":336,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"322dd8f5-f297-43e3-f11e-24daedcace8a"},"source":["new_model = Model() #Model class is expected/required \n","new_model.load_state_dict(torch.load('/content/drive/MyDrive/Colab Notebooks/Models/my_iris_model.pt'))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zYPYCWQsHTSL","executionInfo":{"status":"ok","timestamp":1627106690296,"user_tz":-360,"elapsed":321,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"47fcbc35-d166-48b8-865f-ac1bba02d9a6"},"source":["new_model.eval"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method Module.eval of Model(\n","  (fc1): Linear(in_features=4, out_features=8, bias=True)\n","  (fc2): Linear(in_features=8, out_features=9, bias=True)\n","  (out): Linear(in_features=9, out_features=3, bias=True)\n",")>"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"ismXdRbOHcG0"},"source":["#Test a new unknown data on the model\n","mystery_iris = torch.tensor([5.6 , 3.7,2.2, 0.5])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UwN0CwYlH2Dz","executionInfo":{"status":"ok","timestamp":1627107139704,"user_tz":-360,"elapsed":344,"user":{"displayName":"Omio","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjHdmM4KX97TqNuAQEO3UxxXHCVdDxU876oKE9RoQ=s64","userId":"11810459850539697386"}},"outputId":"aac2d567-ee09-49c6-81e7-02fa0ca7ffab"},"source":["with torch.no_grad():\n","  print(new_model(mystery_iris))\n","  print(new_model(mystery_iris).argmax().item())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["tensor([ 15.6580,   7.6037, -19.0860])\n","0\n"],"name":"stdout"}]}]}